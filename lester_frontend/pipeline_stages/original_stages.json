{
  "DATAPREP_ORIGINAL": "import os\nfrom transformers import pipeline\nos.environ[\"TOKENIZERS_PARALLELISM\"] = \"False\"\nimport warnings\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n\ntarget_countries = ['UK', 'DE', 'FR']\ncustomer_data = {}\n\nsentiment_predictor = pipeline('sentiment-analysis', model='distilbert-base-uncased-finetuned-sst-2-english')\n\ndef matches_usecase(text):\n    return \"complaint\" in text or \"bank account\" in text\n\ndef sanitize(text):\n    return text.lower()\n\nwith open(\".scratchspace/__intermediate.csv\", 'w') as output_file:\n    with open(\"data/customers.csv\") as file:\n        for line in file:\n            parts = line.strip().split(',')\n            customer_id, customer_email, bank, country, level = parts\n            is_premium = (level == 'premium')\n            if country in target_countries:\n                customer_data[customer_email] = (bank, country, is_premium)\n\n    with open(\"data/mails.csv\") as file:\n        for line in file:\n            parts = line.strip().split(\",\")\n            mail_id, email, raw_date, mail_subject, mail_text = parts\n            mail_year = int(raw_date.split(\"-\")[0])\n            if mail_year >= 2022:\n                    if email in customer_data:\n                        bank, country, is_premium = customer_data[email]\n                        title = sanitize(mail_subject)\n                        text = sanitize(mail_text)\n                        sentiment = sentiment_predictor(mail_text)[0]['label'].lower()\n                        output_file.write(f\"{title}\\t{text}\\t{bank}\\t{country}\\t{sentiment}\\t{is_premium}\\n\")\n",
  "FEATURE_ORIGINAL": "import numpy as np\nfrom sentence_transformers import SentenceTransformer\n\nsentence_embedder = SentenceTransformer(\"all-mpnet-base-v2\")\n\ndef count_words(text):\n    return len(text.split(\" \"))\n\ncountry_indices = {'DE': 0, 'FR': 1, 'UK': 2}\n\ntitles = []\ntitle_lengths = []\ntexts = []\ncountries = []\n\n\nwith open(\".scratchspace/__intermediate.csv\") as file:\n    for line in file:\n        parts = line.strip().split(\"\\t\")\n        title, text, bank, country, sentiment, is_premium = parts\n\n        titles.append(title)\n        title_lengths.append(len(title))\n        texts.append(text)\n        countries.append(country)\n\nsubject_embeddings = sentence_embedder.encode(titles)\ntext_embeddings = sentence_embedder.encode(texts)\ntitle_lengths_column = np.array(title_lengths)\ntitle_lengths_column = (title_lengths_column - np.mean(title_lengths_column)) / np.std(title_lengths_column)\n\ncountry_onehot = np.zeros((len(countries), len(country_indices)))\nfor row, country in enumerate(countries):\n    country_onehot[row, country_indices[country]] = 1.0\n\n\nX = np.concatenate((\n    subject_embeddings,\n    text_embeddings,\n    title_lengths_column.reshape(-1,1),\n    country_onehot\n), axis=1)\n",
  "MODEL_ORIGINAL": "from sklearn.linear_model import SGDClassifier\nmodel = SGDClassifier(loss=\"log_loss\", penalty=None)\n"
}